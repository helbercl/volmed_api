Quando desenvolvemos APIs e queremos que todos os seus recursos fiquem disponíveis
 a qualquer cliente HTTP, uma das coisas que vem à nossa cabeça
 é o CORS (Cross-Origin Resource Sharing), em português,
 “compartilhamento de recursos com origens diferentes”.
 Se ainda não aconteceu com você, fique tranquilo, é normal termos erros de CORS
 na hora de consumir e disponibilizar APIs.


 CORS
 O CORS é um mecanismo utilizado para adicionar cabeçalhos HTTP que informam aos navegadores para permitir
 que uma aplicação Web seja executada em uma origem e acesse recursos de outra origem diferente.
 Esse tipo de ação é chamada de requisição cross-origin HTTP.
  Na prática, então, ele informa aos navegadores se um determinado recurso pode ou não ser acessado.

 Mas por que os erros acontecem? Chegou a hora de entender!

 Same-origin policy

 Por padrão, uma aplicação Front-end, escrita em JavaScript, só consegue acessar recursos localizados na mesma origem
 da solicitação. Isso acontece por conta da política de mesma origem (same-origin policy),
 que é um mecanismo de segurança dos Browsers que restringe a maneira de um documento ou script de uma origem interagir
 com recursos de outra origem. Essa política possui o objetivo de frear ataques maliciosos.

 Duas URLs compartilham a mesma origem se o protocolo, porta (caso especificado) e host são os mesmos.
 Vamos comparar possíveis variações considerando a URL https://cursos.alura.com.br/category/programacao:


 Agora, fica a dúvida: o que fazer quando precisamos consumir uma API com URL diferente sem termos problemas com o CORS?
  Como, por exemplo, quando queremos consumir uma API que roda na porta 8000 a partir de uma aplicação React rodando
  na porta 3000. Veja só!

 Ao enviar uma requisição para uma API de origem diferente, a API precisa retornar um header chamado
 Access-Control-Allow-Origin. Dentro dele, é necessário informar as diferentes origens que serão permitidas para
 consumir a API, em nosso caso: Access-Control-Allow-Origin: http://localhost:3000.

 É possível permitir o acesso de qualquer origem utilizando o símbolo *(asterisco): Access-Control-Allow-Origin: *.
 Mas isso não é uma medida recomendada, pois permite que origens desconhecidas acessem o servidor,
 a não ser que seja intencional, como no caso de uma API pública. Agora vamos ver como fazer isso no Spring Boot
  de maneira correta.


Por que o padrão repository ao invés do DAO utilizando Spring?
O padrão de repositório incentiva um design orientado a domínio, fornecendo uma compreensão mais fácil do domínio e da estrutura de dados.
Além disso, utilizando o repository do Spring não temos que nos preocupar em utilizar diretamente a API da JPA, bastando apenas
criar os métodos que o Spring cria a implementação em tempo de execução, deixando o código muito mais simples, menor e legível.






Escolher entre o método HTTP PUT ou PATCH é uma dúvida comum que surge quando estamos desenvolvendo APIs e precisamos
criar um endpoint para atualização de recursos. Vamos entender as diferenças entre as duas opções e quando utilizar
cada uma.

PUT
O método PUT substitui todos os atuais dados de um recurso pelos dados passados na requisição, ou seja, estamos falando
 de uma atualização integral. Então, com ele, fazemos a atualização total de um recurso em apenas uma requisição.

PATCH
O método PATCH, por sua vez, aplica modificações parciais em um recurso. Logo, é possível modificar apenas uma parte
de um recurso. Com o PATCH, então, realizamos atualizações parciais, o que torna as opções de atualização mais flexíveis.

Qual escolher?
Na prática, é difícil saber qual método utilizar, pois nem sempre saberemos se um recurso será atualizado parcialmente
 ou totalmente em uma requisição - a não ser que realizemos uma verificação quanto a isso, algo que não é recomendado.

O mais comum então nas aplicações é utilizar o método PUT para requisições de atualização de recursos em uma API, sendo
essa a nossa escolha no projeto utilizado ao longo deste curso.